package com.minderv.scanners;

import com.minderv.core.model.NetworkSystem;
import com.minderv.core.model.ScanResult;
import com.minderv.core.PlanGenerator;
import com.minderv.scanners.impl.NmapScanner;
import com.minderv.scanners.impl.VulnerabilityDB;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class VulnerabilityScanner {
    private static final Logger logger = LogManager.getLogger(VulnerabilityScanner.class);

    public ScanResult performScan(NetworkSystem system) {
        try {
            List<ScanResult.PortInfo> ports = new ArrayList<>();
            List<ScanResult.Vulnerability> vulns = new ArrayList<>();

            // 获取目标列表
            String target = PlanGenerator.getScanTarget(system);
            List<String> targets = parseTargets(target);

            logger.info("开始扫描 {} 个目标: {}", targets.size(), targets);

            for (String singleTarget : targets) {
                try {
                    logger.info("扫描目标: {}", singleTarget);

                    // 创建临时系统配置
                    NetworkSystem tempSystem = createTempSystem(system, singleTarget);

                    // 执行扫描
                    List<ScanResult.PortInfo> targetPorts = NmapScanner.scanPorts(tempSystem);
                    ports.addAll(targetPorts);

                    logger.info("目标 {} 发现 {} 个开放端口", singleTarget, targetPorts.size());
                } catch (Exception e) {
                    logger.error("扫描目标 {} 失败: {}", singleTarget, e.getMessage());
                }
            }

            // 检查漏洞
            vulns.addAll(VulnerabilityDB.checkVulnerabilities(ports));

            logger.info("扫描完成，共发现 {} 个开放端口和 {} 个漏洞", ports.size(), vulns.size());
            return new ScanResult(ports, vulns);
        } catch (Exception e) {
            logger.error("扫描失败，返回空结果: {}", e.getMessage());
            return new ScanResult(List.of(), List.of());
        }
    }

    private List<String> parseTargets(String target) {
        // 处理逗号分隔的目标
        if (target.contains(",")) {
            return Arrays.asList(target.split(","));
        }

        // 处理 IP 范围 (CIDR)
        if (target.contains("/")) {
            // 实际应用中应扩展为解析 CIDR 范围
            // 这里简化为返回单个目标
            return List.of(target);
        }

        // 单目标
        return List.of(target);
    }

    private NetworkSystem createTempSystem(NetworkSystem original, String target) {
        // 创建只包含目标地址的临时网络接口
        NetworkSystem.NetworkInterface fakeInterface =
                new NetworkSystem.NetworkInterface("custom-target", target);

        return new NetworkSystem(
                "Custom Scan: " + target,
                original.dataFlows(),
                original.securityConfigs(),
                List.of(fakeInterface)
        );
    }
}


